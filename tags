!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/huece/Projects/friendly_local_jukebox/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
0	tsconfig.json	/^	"exclude": [ "node_modules", "**\/*.spec.ts" ]$/;"	s	array:exclude
0	tsconfig.json	/^	"include": [ "src\/**\/*" ],$/;"	s	array:include
1	tsconfig.json	/^	"exclude": [ "node_modules", "**\/*.spec.ts" ]$/;"	s	array:exclude
@discordjs/builders	package.json	/^    "@discordjs\/builders": "^0.15.0",$/;"	s	object:dependencies
@discordjs/opus	package.json	/^    "@discordjs\/opus": "^0.5.0",$/;"	s	object:dependencies
@discordjs/rest	package.json	/^    "@discordjs\/rest": "^0.5.0",$/;"	s	object:dependencies
@discordjs/voice	package.json	/^    "@discordjs\/voice": "^0.10.0",$/;"	s	object:dependencies
@tsconfig/recommended	package.json	/^    "@tsconfig\/recommended": "^1.0.1",$/;"	s	object:devDependencies
@types/lodash	package.json	/^    "@types\/lodash": "^4.14.182",$/;"	s	object:devDependencies
@types/node	package.json	/^    "@types\/node": "^18.0.0",$/;"	s	object:devDependencies
@typescript-eslint/eslint-plugin	package.json	/^    "@typescript-eslint\/eslint-plugin": "^5.28.0",$/;"	s	object:devDependencies
@typescript-eslint/parser	package.json	/^    "@typescript-eslint\/parser": "^5.28.0",$/;"	s	object:devDependencies
COLLECTOR_IDLE	src/commands/queue.ts	/^const COLLECTOR_IDLE = 15000;$/;"	C
COLLECTOR_MAX	src/commands/queue.ts	/^const COLLECTOR_MAX = 1000;$/;"	C
COLLECTOR_TIME	src/commands/queue.ts	/^const COLLECTOR_TIME = 15000000;$/;"	C
Command	src/types.ts	/^export interface Command {$/;"	i
Friendly Local Jukebox	README.md	/^# Friendly Local Jukebox$/;"	c
MAX_4014_TIMEOUT	src/music/session.ts	/^const MAX_4014_TIMEOUT = 5000;$/;"	C
MAX_READY_TIMEOUT	src/commands/play.ts	/^const MAX_READY_TIMEOUT = 20000;$/;"	C
MAX_READY_TIMEOUT	src/music/session.ts	/^const MAX_READY_TIMEOUT = 20000;$/;"	C
MAX_REJOIN_ATTEMPTS	src/music/session.ts	/^const MAX_REJOIN_ATTEMPTS = 5;$/;"	C
PAGE_SIZE	src/music/queue.ts	/^const PAGE_SIZE = 10;$/;"	C
Queue	src/music/queue.ts	/^export class Queue {$/;"	c
RECONNECT_TIMEOUT_BASE_TIME	src/music/session.ts	/^const RECONNECT_TIMEOUT_BASE_TIME = 5000;$/;"	C
Session	src/music/session.ts	/^export class Session {$/;"	c
SuggestorData	src/music/track.ts	/^export interface SuggestorData {$/;"	i
Track	src/music/track.ts	/^export class Track implements TrackData {$/;"	c
TrackData	src/music/track.ts	/^export interface TrackData {$/;"	i
TrackMethods	src/music/track.ts	/^export type TrackMethods = Pick<TrackData, 'onStart' | 'onFinish' | 'onError'>;$/;"	a
actionRow	src/music/queue.ts	/^		const actionRow = createBaseQueueActionRow();$/;"	C	method:Queue.createActionRow
actionRow	src/music/queue.ts	/^		const actionRow = this.createActionRow(disabled ? 'disabled' : newPage);$/;"	C	method:Queue.getElements
apiKey	src/music/track.ts	/^		const apiKey = process.env.GOOGLE_API_KEY;$/;"	C
audioPlayer	src/music/session.ts	/^	public readonly audioPlayer = createAudioPlayer();$/;"	p	class:Session
author	package.json	/^  "author": "",$/;"	s
avatarURL	src/music/track.ts	/^	avatarURL?: URL;$/;"	p	interface:SuggestorData
avatarUrlString	src/music/track.ts	/^		const avatarUrlString = user.avatarURL({ dynamic: true, size: 32 });$/;"	C
bufferutil	package.json	/^    "bufferutil": "^4.0.6",$/;"	s	object:dependencies
build	package.json	/^    "build": "rm -rf build && tsc",$/;"	s	object:scripts
client	src/index.ts	/^const client = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_VOICE_STATES] })/;"	C
clientId	src/refresh.ts	/^const clientId = process.env.DISCORD_CLIENT_ID ?? '';$/;"	C
collector	src/commands/queue.ts	/^			const collector = msg.createMessageComponentCollector({$/;"	C
command	src/index.ts	/^	const command = commands.get(interaction.commandName);$/;"	C
command	src/types.ts	/^	command: SlashCommandBuilder;$/;"	p	interface:Command
commands	src/index.ts	/^const commands = await getCommandCollection(joinPathWithMeta(import.meta.url, '.\/commands'));$/;"	C
commands	src/refresh.ts	/^const commands = (await getCommands(joinPathWithMeta(import.meta.url, '.\/commands'))).map(comma/;"	C
compilerOptions	tsconfig.json	/^	"compilerOptions": {$/;"	o
constructor	src/music/queue.ts	/^	constructor(session: Session) {$/;"	m	class:Queue
constructor	src/music/track.ts	/^	private constructor({ url, title, thumbnailUrl, lengthSeconds, onStart, onFinish, onError, sugg/;"	m	class:Track
createActionRow	src/music/queue.ts	/^	private createActionRow(page: number | 'disabled'): MessageActionRow {$/;"	m	class:Queue
createBaseEmbed	src/util/createBaseEmbed.ts	/^export function createBaseEmbed(): MessageEmbed {$/;"	f
createBaseQueueActionRow	src/music/queue.ts	/^function createBaseQueueActionRow(): MessageActionRow {$/;"	f
createEmbed	src/music/queue.ts	/^	private createEmbed(page: number, ): [MessageEmbed, number] {$/;"	m	class:Queue
createTrack	src/commands/play.ts	/^async function createTrack(query: string, methods: TrackMethods, user: User): Promise<Track> {$/;"	f
deleteSession	src/store/sessions.ts	/^export function deleteSession(guildId: Snowflake | undefined | null): boolean {$/;"	f
dependencies	package.json	/^  "dependencies": {$/;"	o
description	package.json	/^  "description": "",$/;"	s
devDependencies	package.json	/^  "devDependencies": {$/;"	o
discord-api-types	package.json	/^    "discord-api-types": "^0.34.0",$/;"	s	object:dependencies
discord.js	package.json	/^    "discord.js": "^13.8.0",$/;"	s	object:dependencies
dotenv	package.json	/^    "dotenv": "^16.0.1",$/;"	s	object:dependencies
elements	src/commands/queue.ts	/^				let elements;$/;"	v
embed	src/music/queue.ts	/^		const [embed, newPage] = this.createEmbed(page);$/;"	C	method:Queue.getElements
embed	src/music/queue.ts	/^		const embed = createBaseEmbed()$/;"	C	method:Queue.createEmbed
enqueue	src/music/queue.ts	/^	public enqueue(track: Track) {$/;"	m	class:Queue
entries	src/music/queue.ts	/^		const entries = Object.entries(this.queue).slice(page * PAGE_SIZE, page * PAGE_SIZE + 10);$/;"	C	method:Queue.createEmbed
erlpack	package.json	/^    "erlpack": "github:discord\/erlpack",$/;"	s	object:dependencies
esModuleInterop	tsconfig.json	/^		"esModuleInterop": true,$/;"	b	object:compilerOptions
eslint	package.json	/^    "eslint": "^8.18.0",$/;"	s	object:devDependencies
exclude	tsconfig.json	/^	"exclude": [ "node_modules", "**\/*.spec.ts" ]$/;"	a
execute	src/types.ts	/^	execute(interaction: Interaction): Promise<void>;$/;"	m	interface:Command
extends	tsconfig.json	/^	"extends": "@tsconfig\/recommended\/tsconfig.json",$/;"	s
getCommandCollection	src/util/getCommandCollection.ts	/^export async function getCommandCollection(path: string): Promise<Collection<string, Command>> {$/;"	f
getCommands	src/util/getCommands.ts	/^export async function getCommands(path: string): Promise<Command[]> {$/;"	f
getElements	src/music/queue.ts	/^	public getElements(page: number, disabled = false): [MessageEmbed | undefined, MessageActionRow/;"	m	class:Queue
getOrCreateSession	src/commands/play.ts	/^async function getOrCreateSession(interaction: CommandInteraction): Promise<Session | undefined>/;"	f
getSession	src/store/sessions.ts	/^export function getSession(guildId?: Snowflake | undefined | null): Session | undefined {$/;"	f
getTrackAtIndex	src/music/queue.ts	/^	public getTrackAtIndex(index: number): Track {$/;"	m	class:Queue
getVoiceChannelIdFromInteraction	src/commands/play.ts	/^function getVoiceChannelIdFromInteraction(interaction: CommandInteraction): string | undefined {$/;"	f
googleapis	package.json	/^    "googleapis": "^103.0.0",$/;"	s	object:dependencies
guildId	src/commands/play.ts	/^			const guildId = interaction.guildId;$/;"	C	function:getOrCreateSession
guildId	src/refresh.ts	/^const guildId = process.env.GUILD_ID ?? process.env.DISCORD_DEV_GUILD_ID ?? '';$/;"	C
hours	src/music/track.ts	/^		const hours = Math.floor((this.lengthSeconds \/ 60) \/ 24);$/;"	C
include	tsconfig.json	/^	"include": [ "src\/**\/*" ],$/;"	a
info	src/music/track.ts	/^		const info = await ytdl.getBasicInfo(url.toString());$/;"	C
joinPathWithMeta	src/util/joinPathWithMeta.ts	/^export function joinPathWithMeta(importMetaUrl: string, to: string): string {$/;"	f
keywords	package.json	/^  "keywords": [],$/;"	a
lengthSeconds	src/music/track.ts	/^	lengthSeconds: number;$/;"	p	interface:TrackData
lengthSeconds	src/music/track.ts	/^	public readonly lengthSeconds: number;$/;"	p	class:Track
license	package.json	/^  "license": "ISC",$/;"	s
lint	package.json	/^    "lint": "eslint src",$/;"	s	object:scripts
lodash	package.json	/^    "lodash": "^4.17.21",$/;"	s	object:dependencies
main	package.json	/^  "main": "build\/index.js",$/;"	s
memberId	src/commands/play.ts	/^		const memberId = interaction.member.voice.channel?.id;$/;"	C	function:getVoiceChannelIdFromInteraction
module	tsconfig.json	/^		"module": "esnext",$/;"	s	object:compilerOptions
moduleResolution	tsconfig.json	/^		"moduleResolution": "node",$/;"	s	object:compilerOptions
msg	src/commands/queue.ts	/^			const msg = (await interaction.reply({ embeds: [ queueEmbed ], components: [ queueActionRow ]/;"	C
name	package.json	/^  "name": "friendly_local_jukebox",$/;"	s
newPage	src/commands/queue.ts	/^		const [queueEmbed, queueActionRow, newPage] = session.queue.getElements(page - 1);$/;"	C
newPage	src/music/queue.ts	/^		const [embed, newPage] = this.createEmbed(page);$/;"	C	method:Queue.getElements
nextTrack	src/music/queue.ts	/^		const nextTrack = this.queue.shift()!;$/;"	C	method:Queue.process
nowPlaying	src/music/queue.ts	/^		const nowPlaying = this.session.nowPlaying;$/;"	C	method:Queue.createEmbed
number	src/commands/remove.ts	/^		const number = interaction.options.getInteger('number');$/;"	C
number	src/commands/skip.ts	/^		const number = interaction.options.getInteger('number');$/;"	C
onError	src/music/track.ts	/^	onError: (err: Error) => void;$/;"	p	interface:TrackData
onError	src/music/track.ts	/^	public readonly onError: (err: Error) => void;$/;"	p	class:Track
onFinish	src/music/track.ts	/^	onFinish: () => void;$/;"	p	interface:TrackData
onFinish	src/music/track.ts	/^	public readonly onFinish: () => void;$/;"	p	class:Track
onStart	src/music/track.ts	/^	onStart: () => void;$/;"	p	interface:TrackData
onStart	src/music/track.ts	/^	public readonly onStart: () => void;$/;"	p	class:Track
optionId	src/commands/play.ts	/^	const optionId = interaction.options.getChannel('voice_channel')?.id;$/;"	C	function:getVoiceChannelIdFromInteraction
outDir	tsconfig.json	/^		"outDir": "build"$/;"	s	object:compilerOptions
page	src/commands/queue.ts	/^			let page = newPage;$/;"	v
page	src/commands/queue.ts	/^		const page = interaction.options.getInteger('page') ?? 1;$/;"	C
probe	src/music/track.ts	/^		const probe = await demuxProbe(stream);$/;"	C
process	src/music/queue.ts	/^	public async process() {$/;"	m	class:Queue
process	src/refresh.ts	/^const guildId = process.env.GUILD_ID ?? process.env.DISCORD_DEV_GUILD_ID ?? '';$/;"	C
query	src/commands/play.ts	/^		const query = interaction.options.getString('query');$/;"	C
queue	src/music/queue.ts	/^	private queue: Track[] = [];$/;"	p	class:Queue
queueActionRow	src/commands/queue.ts	/^				const [queueEmbed, queueActionRow] = session.queue.getElements(page, true);$/;"	C
queueActionRow	src/commands/queue.ts	/^		const [queueEmbed, queueActionRow, newPage] = session.queue.getElements(page - 1);$/;"	C
queueEmbed	src/commands/queue.ts	/^				const [queueEmbed, queueActionRow] = session.queue.getElements(page, true);$/;"	C
queueEmbed	src/commands/queue.ts	/^		const [queueEmbed, queueActionRow, newPage] = session.queue.getElements(page - 1);$/;"	C
queueLock	src/music/queue.ts	/^	private queueLock = false;	$/;"	p	class:Queue
readyLock	src/music/queue.ts	/^	private readyLock = false;$/;"	p	class:Queue
refresh	package.json	/^    "refresh": "REFRESH_TYPE=GLOBAL node --es-module-specifier-resolution=node build\/refresh.js/;"	s	object:scripts
refresh:dev	package.json	/^    "refresh:dev": "node --es-module-specifier-resolution=node build\/refresh.js",$/;"	s	object:scripts
remove	src/music/queue.ts	/^	public remove(start: number, num?: number) {$/;"	m	class:Queue
resource	src/music/queue.ts	/^			const resource = await nextTrack.intoAudioResource();$/;"	C	method:Queue.process
rest	src/refresh.ts	/^const rest = new REST({ version: '10' }).setToken(token);$/;"	C
scripts	package.json	/^  "scripts": {$/;"	o
seconds	src/music/track.ts	/^		const seconds = (this.lengthSeconds % 60).toString().padStart(2, '0');$/;"	C
service	src/music/track.ts	/^		const service = google.youtube({ version: 'v3', auth: apiKey });$/;"	C
session	src/commands/np.ts	/^		const session = getSession(interaction.guildId);$/;"	C
session	src/commands/play.ts	/^		const session = await getOrCreateSession(interaction);$/;"	C
session	src/commands/queue.ts	/^		const session = getSession(interaction.guildId);$/;"	C
session	src/commands/remove.ts	/^		const session = getSession(interaction.guildId);$/;"	C
session	src/commands/skip.ts	/^		const session = getSession(interaction.guildId);$/;"	C
session	src/commands/stop.ts	/^		const session = getSession(interaction.guildId);$/;"	C
session	src/music/queue.ts	/^	private readonly session: Session;$/;"	p	class:Queue
sessions	src/store/sessions.ts	/^const sessions = new Collection<Snowflake, Session>();$/;"	C
setSession	src/store/sessions.ts	/^export function setSession(guildId: Snowflake, session: Session) {$/;"	f
start	package.json	/^    "start": "node --es-module-specifier-resolution=node .",$/;"	s	object:scripts
stop	src/music/queue.ts	/^	public stop() {$/;"	m	class:Queue
stream	src/music/track.ts	/^		const stream = ytdl($/;"	C
suggestor	src/music/track.ts	/^	public readonly suggestor: SuggestorData;$/;"	p	class:Track
suggestor	src/music/track.ts	/^	suggestor: SuggestorData;$/;"	p	interface:TrackData
target	tsconfig.json	/^		"target": "es2017",$/;"	s	object:compilerOptions
test	package.json	/^    "test": "echo \\"Error: no test specified\\" && exit 1"$/;"	s	object:scripts
thumbnailUrl	src/music/track.ts	/^	public readonly thumbnailUrl: URL;$/;"	p	class:Track
thumbnailUrl	src/music/track.ts	/^	thumbnailUrl: URL;$/;"	p	interface:TrackData
title	src/music/track.ts	/^	public readonly title: string;$/;"	p	class:Track
title	src/music/track.ts	/^	title: string;$/;"	p	interface:TrackData
to	src/commands/skip.ts	/^		const to = interaction.options.getInteger('to');$/;"	C
token	src/index.ts	/^const token = process.env.DISCORD_BOT_TOKEN ?? '';$/;"	C
token	src/refresh.ts	/^const token = process.env.DISCORD_BOT_TOKEN ?? '';$/;"	C
totalPages	src/music/queue.ts	/^			const totalPages = Math.ceil(this.queue.length \/ PAGE_SIZE);$/;"	C	method:Queue.createActionRow
totalPages	src/music/queue.ts	/^		const totalPages = Math.ceil(this.queue.length \/ PAGE_SIZE);$/;"	C	method:Queue.createEmbed
track	src/commands/np.ts	/^		const track = session.nowPlaying;$/;"	C
track	src/commands/play.ts	/^			const track: Track = await createTrack($/;"	C
track	src/commands/remove.ts	/^			const track = session.queue.getTrackAtIndex(number - 1);$/;"	C
track	src/commands/skip.ts	/^			const track = session.nowPlaying!;$/;"	C
track	src/commands/skip.ts	/^			const track = session.queue.getTrackAtIndex(to - 1);$/;"	C
ts-node	package.json	/^    "ts-node": "^10.8.1",$/;"	s	object:devDependencies
tweetnacl	package.json	/^    "tweetnacl": "^1.0.3",$/;"	s	object:dependencies
type	package.json	/^  "type": "module",$/;"	s
typescript	package.json	/^    "typescript": "^4.7.4"$/;"	s	object:devDependencies
url	src/music/track.ts	/^	public readonly url: URL;$/;"	p	class:Track
url	src/music/track.ts	/^	url: URL;$/;"	p	interface:TrackData
username	src/music/track.ts	/^	username: string;$/;"	p	interface:SuggestorData
utf-8-validate	package.json	/^    "utf-8-validate": "^5.0.9",$/;"	s	object:dependencies
version	package.json	/^  "version": "1.0.0",$/;"	s
voiceChannelId	src/commands/play.ts	/^		const voiceChannelId = getVoiceChannelIdFromInteraction(interaction);$/;"	C	function:getOrCreateSession
voiceConnection	src/music/session.ts	/^	public readonly voiceConnection: VoiceConnection;$/;"	p	class:Session
ytdl-core	package.json	/^    "ytdl-core": "^4.11.0",$/;"	s	object:dependencies
zlib-sync	package.json	/^    "zlib-sync": "^0.1.7"$/;"	s	object:dependencies
